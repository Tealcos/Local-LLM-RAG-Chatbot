Test file for ingestion


# requirements.txt
fastapi==0.104.1
uvicorn==0.24.0
chromadb==0.4.18
python-jose==3.3.0
python-multipart==0.0.6
openai==1.3.0
python-dotenv==1.0.0

# main.py
from fastapi import FastAPI, Depends, HTTPException, Security
from fastapi.security import OAuth2AuthorizationCodeBearer
from fastapi.middleware.cors import CORSMiddleware
import chromadb
from chromadb.config import Settings
import openai
from typing import List, Optional
import os
from dotenv import load_dotenv
from jose import JWTError, jwt
from pydantic import BaseModel

load_dotenv()

app = FastAPI()

# CORS setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Auth setup
oauth2_scheme = OAuth2AuthorizationCodeBearer(
    authorizationUrl="your_auth_url",
    tokenUrl="your_token_url"
)

# ChromaDB setup
chroma_client = chromadb.Client(Settings(
    chroma_db_impl="duckdb+parquet",
    persist_directory="db"
))

# Models
class Document(BaseModel):
    content: str
    access_rights: List[str]
    metadata: dict = {}

class Query(BaseModel):
    question: str
    project_id: Optional[str] = None

# Auth helper functions
async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(
            token, 
            os.getenv("SECRET_KEY"), 
            algorithms=[os.getenv("ALGORITHM")]
        )
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
        return {"user_id": user_id, "access_rights": payload.get("access_rights", [])}
    except JWTError:
        raise credentials_exception

# API endpoints
@app.post("/documents")
async def upload_document(
    document: Document,
    current_user = Depends(get_current_user)
):
    collection = chroma_client.get_or_create_collection(
        name="documents",
        metadata={"hnsw:space": "cosine"}
    )
    
    # Generate embeddings
    embeddings = openai.Embedding.create(
        input=document.content,
        model="text-embedding-ada-002"
    )
    
    # Store document
    collection.add(
        embeddings=[embeddings.data[0].embedding],
        documents=[document.content],
        metadatas=[{
            **document.metadata,
            "access_rights": document.access_rights,
            "owner": current_user["user_id"]
        }]
    )
    
    return {"status": "success"}

@app.post("/query")
async def query_documents(
    query: Query,
    current_user = Depends(get_current_user)
):
    collection = chroma_client.get_collection("documents")
    
    # Generate query embedding
    query_embedding = openai.Embedding.create(
        input=query.question,
        model="text-embedding-ada-002"
    )
    
    # Query with access rights filter
    results = collection.query(
        query_embeddings=[query_embedding.data[0].embedding],
        where={"access_rights": {"$in": current_user["access_rights"]}},
        n_results=5
    )
    
    # Generate response with LLM
    context = "\n".join(results["documents"][0])
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant. Answer based on the context provided."},
            {"role": "user", "content": f"Context: {context}\n\nQuestion: {query.question}"}
        ]
    )
    
    return {
        "answer": response.choices[0].message.content,
        "sources": results["metadatas"][0]
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
